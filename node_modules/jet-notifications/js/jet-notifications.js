
(function (define) {
        'use strict';

        (function (root, factory) {
                if (typeof define === 'function' && define.amd) {
                        define(factory);
                } else if (typeof exports === 'object') {
                        module.exports = factory();
                } else {
                        root.jetNotifications = factory();
                }
        }(window, function () {
                return (function () {








                        var jetNotifications = function()
                        {


                                function jetNotifications(setup)
                                {
                                        this.container          = setup.container;
                                        this.notificationId     = '';
                                        this.icon               = '';
                                        this.message            = '';
                                        this.heading            = '';
                                        this.grid               = '';
                                        this.doLayout();

                                }
                                jetNotifications.prototype.doLayout = function () {


                                        this.createNotificationsGrid();
                                };


                                jetNotifications.prototype.createNotificationsGrid = function()
                                {
                                        let gid = document.createElement('div');
                                        gid.classList.add('jet-notification-grid');
                                        let base = document.getElementById(this.container);
                                        //console.log(this.container);
                                        //console.log(base);
                                        base.appendChild(gid);
                                        this.grid = gid;
                                        return this.grid;

                                }


                                jetNotifications.prototype.successNotification = function(thisNote)
                                {

                                        // allocate the message variables from the global scope.
                                        this.notificationId = thisNote.notificationId;
                                        this.heading = thisNote.heading;
                                        this.message = thisNote.message;

                                        let notify = document.createElement('div');
                                        notify.classList.add('jet-notification');
                                        notify.classList.add('success');
                                        notify.setAttribute('id',this.notificationId);

                                        let icon = document.createElement('i');
                                        icon.setAttribute('class','fas fa-check-circle');

                                        let head =  document.createElement('strong');
                                        head.innerHTML = this.heading;

                                        let body =  document.createElement('p');
                                        body.classList.add('jet-notification-p');
                                        body.innerHTML = this.message;


                                        let progressBar = document.createElement('div');
                                        progressBar.classList.add('tn-progress');

                                        this.grid.appendChild(notify);
                                        notify.appendChild(icon);
                                        notify.appendChild(head);
                                        notify.appendChild(body);
                                        notify.appendChild(progressBar);

                                        this.demo(this.notificationId);


                                }
                                jetNotifications.prototype.errorNotification = function(thisNote)
                                {
                                        // allocate the message variables from the global scope.
                                        this.notificationId = thisNote.notificationId;
                                        this.heading = thisNote.heading;
                                        this.message = thisNote.message;


                                        let notify = document.createElement('div');
                                        notify.classList.add('jet-notification');
                                        notify.classList.add('error');
                                        notify.setAttribute('id',this.notificationId);

                                        let icon = document.createElement('i');
                                        icon.setAttribute('class','fas fa-exclamation-circle');

                                        let head =  document.createElement('strong');
                                        head.innerHTML = this.heading;

                                        let body =  document.createElement('p');
                                        body.classList.add('jet-notification-p');
                                        body.innerHTML = this.message

                                        let progressBar = document.createElement('div');
                                        progressBar.classList.add('tn-progress');

                                        this.grid.appendChild(notify);
                                        notify.appendChild(icon);
                                        notify.appendChild(head);
                                        notify.appendChild(body);



                                        notify.appendChild(progressBar);
                                        this.demo(this.notificationId);
                                }
                                jetNotifications.prototype.infoNotification = function(thisNote)
                                {

                                        // allocate the message variables from the global scope.
                                        this.notificationId = thisNote.notificationId;
                                        this.heading = thisNote.heading;
                                        this.message = thisNote.message;

                                        let notify = document.createElement('div');
                                        notify.classList.add('jet-notification');
                                        notify.setAttribute('id',this.notificationId);

                                        let icon = document.createElement('i');
                                        icon.setAttribute('class','fas fa-check-square');

                                        let head =  document.createElement('strong');
                                        head.innerHTML = this.heading;

                                        let body =  document.createElement('p');
                                        body.classList.add('jet-notification-p');
                                        body.innerHTML = this.message;

                                        let progressBar = document.createElement('div');
                                        progressBar.classList.add('tn-progress');

                                        this.grid.appendChild(notify);
                                        notify.appendChild(icon);
                                        notify.appendChild(head);
                                        notify.appendChild(body);

                                        notify.appendChild(progressBar);

                                        this.demo(this.notificationId);
                                }

                                jetNotifications.prototype.remove = function(noteId) {
                                        return document.getElementById(noteId).remove();

                                }

                                jetNotifications.prototype.sleep = function(ms) {
                                        return new Promise(resolve => setTimeout(resolve, ms));
                                }

                                jetNotifications.prototype.demo=async function(noteId) {
                                        //console.log('Taking a break...');
                                        var e = document.getElementById(noteId);
                                        //var e2 = document.getElementById("note6");
                                        //var e3 = document.getElementById("note4");
                                        e.classList.add('show');
                                        //await this.sleep(1000);
                                        //e2.classList.add('show');
                                        //await this.sleep(1000);
                                        //e3.classList.add('show');

                                        await this.sleep(5000);
                                        //console.log('Two seconds later, showing sleep in a loop...');

                                        e.classList.remove('show');
                                        await this.sleep(1000);
                                        return this.remove(noteId);
                                        //e2.classList.remove('show');
                                        //await this.sleep(1000);
                                        //e3.classList.remove('show');


                                }
                                jetNotifications.prototype.myCallback=async function(callBack)
                                {
                                        await this.sleep(1000);
                                        callBack();
                                }

                                return jetNotifications;
                        }();



                        return jetNotifications;
                }());
        }));
}(window.define));
