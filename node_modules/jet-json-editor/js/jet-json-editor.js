
(function (define) {
        'use strict';

        (function (root, factory) {
                if (typeof define === 'function' && define.amd) {
                        define(factory);
                } else if (typeof exports === 'object') {
                        module.exports = factory();
                } else {
                        root.jetJsonEditor = factory();
                }
        }(window, function () {
                return (function () {

                        'use-strict';

                        var jetJsonEditor = function()
                        {

                                function jetJsonEditor(origionalJson,editJson)
                                {
                                        this.origionalJson = origionalJson;
                                        this.editJson = editJson;
                                        this.modifiedJSON = '';
                                        this.deleteKeys();
                                        this.mergeKeys();
                                        this.renameKeys();

                                        this.returnModifiedJSON();


                                }

                                jetJsonEditor.prototype.renameKeys = function()
                                {

                                        let shortObj = this.editJson.renameKeys;


                                        for (let i = 0 ; i<this.modifiedJSON.length ;i++)
                                        {


                                                //method transforms a list of key-value pairs into an object.
                                                //
                                                //
                                                const altObj = Object.fromEntries(
                                                        Object.entries(this.modifiedJSON[i]).map(function([key, value])
                                                        {

                                                                let I = '';
                                                                if (shortObj.hasOwnProperty(key)){

                                                                        I =   [shortObj[key], value] ;
                                                                }else{
                                                                        I = [key,value];
                                                                }
                                                                return I;
                                                        }
                                                        //      oriogional mapping techneque
                                                        //        Object.entries(this.modifiedJSON).map(([key, value]) =>  [shortObj[key], value])

                                                )


                                        )


                                        this.modifiedJSON[i] =altObj;
                                }
                                //console.log(this.modifiedJSON,'modded');

                        }

                        jetJsonEditor.prototype.deleteKeys = function()
                        {
                                //console.log(this.editJson.deleteKeys);

                                //console.log(this.origionalJson.length,'origoinal');
                                for(let i =0 ;i<this.origionalJson.length ; i++)
                                {
                                        let t = this.origionalJson[i];
                                        //console.log(t);

                                        for (var key in this.editJson.deleteKeys){

                                                delete this.origionalJson[i][key];

                                        }
                                }

                                this.modifiedJSON = this.origionalJson;
                                // console.log(this.modifiedJSON);


                        }
                        jetJsonEditor.prototype.mergeKeys = function()
                        {
                                //console.log(this.editJson.deleteKeys);

                                //console.log(this.origionalJson.length,'origoinal');
                                for(let i =0 ;i<this.origionalJson.length ; i++)
                                {
                                        let t = this.origionalJson[i];
                                        //console.log(t);

                                        for (var key in this.editJson.mergeKeys){

                                                console.log(this.editJson.mergeKeys[key],4444)
                                                let ello = this.editJson.mergeKeys[key];
                                                var keys = Object.keys(ello);
                                                let repeater = '';
                                                console.log(key,2345);
                                                for (var childKey in this.editJson.mergeKeys[key]){
                                                        //console.log(childKey,77);
                                                                //console.log( this.origionalJson[i],55557);
                                                                //console.log( this.origionalJson[i],55558);
repeater += this.origionalJson[i][childKey]+' , ';
                                                        //        this.modifiedJSON[i].key='meeeework';
delete this.origionalJson[i][childKey];

                                                                //things left to do
                                                }
                                                this.modifiedJSON[i][key]=repeater;

                                        }
                                        console.log(this.modifiedJSON[i],43);
                                }

                                this.modifiedJSON = this.origionalJson;
                                // console.log(this.modifiedJSON);


                        }

                        jetJsonEditor.prototype.returnModifiedJSON = function()
                        {
                                return this.modifiedJSON;
                        }


                        return jetJsonEditor;
                }();



                return jetJsonEditor;
        }());
}));
}(window.define));
