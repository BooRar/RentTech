(function (define) {
        'use strict';

        (function (root, factory)
        {
                if (typeof define === 'function' && define.amd)
                {
                        define(jetMask,factory);
                }
                else if (typeof exports === 'object')
                {
                        module.exports = factory();
                }
                else
                {
                        root.jetMask = factory();
                }
        }
        (window, function ()
        {
                return (function ()
                {

                        var jetMask = function()
                        {
                                //var element ="";
                                var canIsert=true;
                                var InputMask = '';


                                function jetMask(MaskObject)
                                {
                                        //console.log(MaskObject);
                                        this.FormElement= MaskObject.FormElement;
                                        this.MaskObject= MaskObject.InputMask;



                                        //this inside and event handelar is the dom object not the constucto class so refrence this as a variable
                                        //this.thisRef = this;

                                        this.element = document.getElementById(this.FormElement);
                                        this.element.onfocus = inputFocusLoadEvents(this);
                                        this.element.onblur =   inputBlurRemoveEvents(this);

                                        function inputFocusLoadEvents(thisRef)
                                        {
                                                thisRef.loadEventHandelars();
                                        }

                                        function inputBlurRemoveEvents(thisRef)
                                        {
                                                thisRef.RemoveEventHandelars();
                                        }

                                }

                                //event loadEventHandelars
                                jetMask.prototype.loadEventHandelars =function()
                                {



                                        //var element = document.getElementById(this.FormElement);
                                        //   console.log(MaskObject);

                                        InputMask=this.MaskObject;
                                        //add an extra char for incase last array has a special char
                                        if (InputMask[this.MaskObject.length -1]!=''){

                                                console.log('last char is a paridagram');
                                                this.MaskObject.push('');

                                        }

                                        var thisRef = this;

                                        //adding the backspace listeners
                                        this.element.addEventListener("keydown", function(e){
                                                thisRef.maskBackspaceEventHandelar(e);
                                        });

                                        //Input event Listener
                                        this.element.addEventListener('input', function(e) {
                                                thisRef.maskEventHandelar(e);

                                        })


                                }
                                //event RemoveEventHandelars
                                jetMask.prototype.RemoveEventHandelars = function()
                                {

                                        var thisRef = this;

                                        //adding the backspace listeners
                                        this.element.removeEventListener("keydown", function(e){
                                                thisRef.maskBackspaceEventHandelar(e);
                                                //
                                        });

                                        //Input event Listener
                                        this.element.removeEventListener('input', function(e) {
                                                thisRef.maskEventHandelar(e);


                                        })


                                }

                                //event Functions
                                jetMask.prototype.maskEventHandelar = function(e)
                                {
                                        //dont allow Chars to exceed the mask
                                        e.target.setAttribute("maxlength",this.MaskObject.length);

                                        //if the backspace is being hit
                                        if(canIsert===true){
                                                this.ApplyMask(e);
                                        }
                                        //        console.log(arguments[0]);

                                }

                                //backspace
                                jetMask.prototype.maskBackspaceEventHandelar =function(e)
                                {
                                        /*
                                        * keyCode: 8
                                        * keyIdentifier: "U+0008"
                                        */
                                        if(e.keyCode === 8 && document.activeElement !== 'text') {
                                                //e.preventDefault();
                                                //
                                                canIsert = false;
                                                //alert('Prevent page from going back');
                                        }else{
                                                canIsert = true;
                                        }
                                }



                                jetMask.prototype.getMask =function (arrayPos)
                                {

                                        return this.MaskObject[arrayPos];
                                }

                                //function with splice
                                jetMask.prototype.ApplyMask=function(e)
                                {
                                        var str = e.target.value;

                                        //get the length
                                        var strlength = str.length;

                                        //check the mask array for special chars at the position of the length
                                        var maskChar =  this.getMask(strlength - 1);

                                        //replace the char and add the string
                                        if(maskChar != '')
                                        {
                                                do
                                                {
                                                        var countBefore = e.target.selectionStart;
                                                        e.target.value=this.MaskString(e);
                                                        var countAfter = e.target.selectionStart;
                                                }
                                                while (countBefore < countAfter );



                                        }


                                }

                                //function that can repeat the proces
                                jetMask.prototype.MaskString = function(e)
                                {


                                        //check to see if the next character also has a mask
                                        var str=e.target.value;
                                        var maskStrLength = e.target.value.length ;
                                        var maskChar2 =  this.getMask(maskStrLength - 1);

                                        if(maskChar2 != '')
                                        {

                                                var firsbit = str.slice(0 , maskStrLength-1);
                                                var lastbit = str.slice(maskStrLength-1 ,maskStrLength);
                                                var adjusted =  firsbit + maskChar2+ lastbit;

                                                return adjusted;
                                        }

                                        return e.target.value;
                                }



                                return jetMask;


                        }();


                        return jetMask;

                }());
        }));
}(window.define));
