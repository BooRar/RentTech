
(function (define) {
  'use strict';

  (function (root, factory) {
    if (typeof define === 'function' && define.amd) {
      define(factory);
    } else if (typeof exports === 'object') {
      module.exports = factory();
    } else {
      root.JetMenu = factory();
    }
  }(window, function () {
    return (function () {

      /** adding a hidden class to the css*/
      var style = document.createElement('style');
      style.type = 'text/css';
      style.innerHTML = '.hide-it { display: none; }';
      document.getElementsByTagName('head')[0].appendChild(style);

      /** Meni is activated*/
      var  menu_is_active = 'false';

      /** List of events supported by the tree view */
      var events = [
        'expand',
        'expandAll',
        'collapse',
        'collapseAll',
        'select'
      ];

      /**
      * A utilite function to check to see if something is a DOM object
      * @param {object} Object to test
      * @returns {boolean} If the object is a DOM object
      */
      function isDOMElement(obj) {
        try {
          return obj instanceof HTMLElement;
        } catch (e) {
          // Some browsers don't support using the HTMLElement so some extra
          // checks are needed.
          return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
        }
      }

      /**
      * A forEach that will work with a NodeList and generic Arrays
      * @param {array|NodeList} arr The array to iterate over
      * @param {function} callback Function that executes for each element. First parameter is element, second is index
      * @param {object} The context to execute callback with
      */
      function forEach(arr, callback, scope) {
        var i, len = arr.length;
        for (i = 0; i < len; i += 1) {
          callback.call(scope, arr[i], i);
        }
      }

      /**
      * Emit an event from the tree view
      * @param {string} name The name of the event to emit
      */
      function emit(instance, name) {
        var args = [].slice.call(arguments, 2);
        var Textnodes;
        if (events.indexOf(name) > -1) {
          if (instance.handlers[name] && instance.handlers[name] instanceof Array) {
            forEach(instance.handlers[name], function (handle) {
              window.setTimeout(function () {
                handle.callback.apply(handle.context, args);
              }, 0);
            });
          }
        } else {
          throw new Error(name + ' event cannot be found on JetMenu.');
        }
      }


      /**
      * Renders the JetMenu view in the DOM
      */
      function render(self) {
      //  console.log(self);

        var container = isDOMElement(self.node) ? self.node : document.getElementById(self.node);
        var leaves = [], click ,click_menubar ,hover_active_menubar,blur_menubar,click_item,clickFolder;
        var renderLeaf = function (item) {

          var toolbar_dropdown = document.createElement('div');
          var toolbar_button = document.createElement('div');
          var button_component = document.createElement('button');
          var menu_item = document.createElement('div');
          var label = document.createElement('div');
          var aria_label = document.createElement('span');
          var menuitem = document.createElement('div');

          menuitem.setAttribute('class', 'toolbar-dropdown closed');
          menuitem.setAttribute('role', 'menuitem');
          menuitem.setAttribute('aria-expanded', 'false');
          toolbar_button.setAttribute('class', 'toolbar-button');
          button_component.setAttribute('class', 'button-component');
          button_component.setAttribute('type', 'button')
          button_component.setAttribute('tabindex', '-1')
          menu_item.setAttribute('class', 'menu-item');
          label.setAttribute('class', 'label');
          aria_label.setAttribute('class', 'aria-label');

          menuitem.appendChild(toolbar_button);
          toolbar_button.appendChild(button_component);
          button_component.appendChild(menu_item);
          menu_item.appendChild(label);
          label.appendChild(aria_label);
          aria_label.innerHTML =  '<span aria-hidden="true">'+item.name;+'</span>';




          // this is where the chilren are added
          if (item.children && item.children.length > 0) {

            var foldout_container                           =document.createElement('div');//id
            var overlay                                     =document.createElement('div');
            var foldout                                     =document.createElement('div');
            var app_menu_foldout                            =document.createElement('div');//id
            var menu_pane                                   =document.createElement('div');
            var list                                        =document.createElement('div');
            var focus_container                             =document.createElement('div');
            var ReactVirtualized__Grid                      =document.createElement('div');
            var ReactVirtualized__Grid__innerScrollContainer=document.createElement('div');
            //=====
            var fake_scroll                                 =document.createElement('div');
            var divo                                         =document.createElement('div');


            //Ser the new Div Proporties
            foldout_container.setAttribute('id', 'foldout-container');//style="position: absolute; top: 27.0028px; left: 0px; width: 100%; height: calc(100% - 27.0028px);"
            foldout_container.setAttribute('class', 'foldout-controller');
            foldout_container.setAttribute('style', 'position: absolute; top: 27.0028px;  width: 100%; height: calc(100% - 27.0028px);');
            overlay.setAttribute('class', 'overlay');//margin-left: -10% ;
            overlay.setAttribute('style', 'margin-left: -50% ;');
            foldout.setAttribute('class', 'foldout');//style="position: absolute; margin-left: 73.9489px; min-width: 40.1278px; height: 100%; top: 0px;"
            foldout.setAttribute('style', 'position: absolute; min-width: 40.1278px;/* height: 100%;*/ top: 0px;');
            app_menu_foldout.setAttribute('id', 'app-menu-foldout');
            menu_pane.setAttribute('class', 'menu-pane menu-pane-edit');//style="height: 195px; max-height: 100%;"
            menu_pane.setAttribute('style', '/*height: 195px;*/ max-height: 100%;');
            list.setAttribute('class', 'list');//role="menu" aria-activedescendant="__ListRow_1--1"
            list.setAttribute('role', 'menu');
            list.setAttribute('aria-activedescendant', '__ListRow_1--1');
            focus_container.setAttribute('class', 'focus-container list-focus-container');
            ReactVirtualized__Grid.setAttribute('class', 'ReactVirtualized__Grid');// style="box-sizing: border-box; direction: ltr; height: 195px; position: relative; width: 225px; will-change: transform; overflow: hidden;"
            ReactVirtualized__Grid.setAttribute('aria-label', '');
            ReactVirtualized__Grid.setAttribute('aria-readonly', 'true');
            ReactVirtualized__Grid.setAttribute('role', '');
            ReactVirtualized__Grid.setAttribute('tabindex', '-1');
            ReactVirtualized__Grid.setAttribute('style', 'box-sizing: border-box; direction: ltr;/* height: 195px;*/ position: relative; width: 225px; will-change: transform; overflow: hidden;');
            ReactVirtualized__Grid__innerScrollContainer.setAttribute('class', 'ReactVirtualized__Grid__innerScrollContainer');
            //role="rowgroup" style="width: auto; height: 190px; max-width: 225px; max-height: 190px; overflow: hidden; position: relative;"
            ReactVirtualized__Grid__innerScrollContainer.setAttribute('role', 'rowgroup');
            ReactVirtualized__Grid__innerScrollContainer.setAttribute('style', 'width: auto; /* height: 190px;*/ max-width: 225px; /* max-height: 190px;*/ overflow: hidden; position: relative;');
            fake_scroll.setAttribute('class', 'fake-scroll');
            fake_scroll.setAttribute('style', 'height: 195px;');
            divo.setAttribute('style', 'height: 190px; pointer-events: none;');

            //appending
            menuitem.appendChild(foldout_container);
            foldout_container.appendChild(overlay);
            //  overlay.appendChild(foldout);
            foldout_container.appendChild(foldout);
            foldout.appendChild(app_menu_foldout);
            app_menu_foldout.appendChild(menu_pane);
            menu_pane.appendChild(list);
            list.appendChild(focus_container);
            //// FIXME:
            list.appendChild(fake_scroll);
            fake_scroll.appendChild(divo);

            focus_container.appendChild(ReactVirtualized__Grid);
            ReactVirtualized__Grid.appendChild(ReactVirtualized__Grid__innerScrollContainer);

            foldout_container.classList.add('hide-it');
            forEach(item.children, function (child) {



              //  var childLeaf = renderLeaf(child);
              var childLeaf = menuItemRender(child)
              ReactVirtualized__Grid__innerScrollContainer.appendChild(childLeaf);
              //      children.appendChild(childLeaf);

            });
            if (!item.expanded) {
              //  ReactVirtualized__Grid__innerScrollContainer.classList.add('hidden');
            }
            //    menuitem.appendChild(children);
          } else {
            //  expando.classList.add('hidden');
          }
          return menuitem;
        };

        /**
        * Renders the tree view in the DOM
        */
        function menuItemRender(item) {

          //console.log(item);

          var list_item = document.createElement('div');
          var menu_item = document.createElement('div');
          var label = document.createElement('div');
          var innerspan = document.createElement('span');
          var accelerator = document.createElement('div');
          list_item.setAttribute('class', 'list-item');
          list_item.setAttribute('id', '__ListRow_1-7');
          list_item.setAttribute('aria-setsize', '8');
          list_item.setAttribute('aria-posinset', '8');
          list_item.setAttribute('aria-selected', 'false');
          list_item.setAttribute('role', 'menuitem');
          list_item.setAttribute('tabindex', '-1');
          list_item.setAttribute('data-item', JSON.stringify(item));
          list_item.setAttribute('style', 'height: 30px; left: 0px;  width: 100%;');//position: absolute; top: 150px;
          menu_item.setAttribute('class', 'menu-item');
          label.setAttribute('class', 'label');
          innerspan.setAttribute('class', 'list');
          //<div class="accelerator">Ctrl+N</div>
          accelerator.setAttribute('class','accelerator');
          list_item.appendChild(menu_item);
          menu_item.appendChild(label);
          label.appendChild(innerspan);
          menu_item.appendChild(accelerator);
          if(item.name =="<hr>"){
            var TotalRule = document.createElement('div');
            TotalRule.setAttribute('class', 'list-item');
            TotalRule.setAttribute('style', 'height: 5px; left: 0px;  width: 100%;');
            TotalRule.innerHTML = '<hr>';
            //list_item.append(TotalRule);
            return TotalRule;
          }else{
            innerspan.innerHTML = item.name;
            accelerator.innerHTML = item.accelerator;
          }
          return list_item;
        }

        forEach(self.data, function (item) {
          leaves.push(renderLeaf.call(self, item));
        });
        container.innerHTML = leaves.map(function (leaf) {
          return leaf.outerHTML;
        }).join('');




        click = function (e) {
          var parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;
          //  console.log(parent);
          var data = JSON.parse(parent.getAttribute('data-item'));
          var leaves = parent.parentNode.querySelector('.tree-child-leaves');
          if (leaves) {
            if (leaves.classList.contains('hidden')) {
              self.expand(parent, leaves);
            } else {
              self.collapse(parent, leaves);
            }
          } else {
            emit(self, 'select', {
              target: e,
              data: data,
              parento :parent
            });
          }
        };
        //Jono add folder click

        click_menubar = function (e) {
          //  e.stopPropagation();
          var parent = (e.target || e.currentTarget);//previousSibling          //
          var parentDropdown = e.currentTarget;
          var data = JSON.parse(parent.getAttribute('data-item'));
          var DropDownSelected = parentDropdown;
          var PopupMenuItem = parentDropdown.querySelector('.foldout-controller');


          if (PopupMenuItem) {
            if (PopupMenuItem.classList.contains('hide-it')) {
              forEach(container.querySelectorAll('.foldout-controller'), function (node2) {
                node2.classList.add('hide-it');
                node2.classList.add('special_show_foler');
              });
              forEach(container.querySelectorAll('.toolbar-dropdown'), function (node3) {
                node3.classList.remove('special_show_button');
                node3.classList.add('closed');
                node3.classList.remove('open');
              });
              PopupMenuItem.classList.remove('hide-it');
              PopupMenuItem.classList.add('special_show_foler');
              DropDownSelected.classList.add('special_show_button');
              DropDownSelected.classList.remove('closed');
              DropDownSelected.classList.add('open');

              menu_is_active=true;
              //console.log(menu_is_active);

            } else {
              PopupMenuItem.classList.add('hide-it');
              PopupMenuItem.classList.remove('special_show_foler');
              DropDownSelected.classList.remove('special_show_button');
              DropDownSelected.classList.add('closed');
              DropDownSelected.classList.remove('open');

              menu_is_active=false;

            }
          } else {
            emit(self, 'select', {
              target: e,
              data: data,
              parento :parent
            });
          }
        };


        hover_active_menubar = function (e)
        {
          var parent = (e.target || e.currentTarget).parentNode;
          var parentDropdown = e.currentTarget;
          var DropDownSelected = parentDropdown;
          var PopupMenuItem = parentDropdown.querySelector('.foldout-controller');

          if (menu_is_active==true)
          {
                if (DropDownSelected.classList.contains('special_show_button')) {

                }else{

              forEach(container.querySelectorAll('.foldout-controller'), function (node2) {
                node2.classList.add('hide-it');
                node2.classList.remove('special_show_foler');
              });
              forEach(container.querySelectorAll('.toolbar-dropdown'), function (node3) {
                node3.classList.remove('special_show_button');
                node3.classList.add('closed');
                node3.classList.remove('open');
              });

            //  console.log('Dropdown  Remove class Attrib and Highlight another   ');
              if(PopupMenuItem){//added incase a menuitem has no children
                PopupMenuItem.classList.remove('hide-it');
                PopupMenuItem.classList.add('special_show_foler');
              }
              DropDownSelected.classList.add('special_show_button');
              DropDownSelected.classList.remove('closed');
              DropDownSelected.classList.add('open');
            }
          }
        }






        /**
        * ==============================================================================================================================
        * [description]
        * @param  {[type]} e [description]
        * @return {[type]}   [description]
        */
        click_item = function (e) {
          var parent = (e.target || e.currentTarget).parentNode;
          var realParent=e.currentTarget;
           var data = JSON.parse(realParent.getAttribute('data-item'));

            emit(self, 'select', {
              target: e,
              data: data,
              parento :realParent
            });
        //  }
        };

        /**
         @constructor for Events
         * @property {object} handlers The attached event handlers
         * @property {object} data The JSON object that represents the tree structure
         * @property {DOMElement} node The DOM element to render the tree in
        */
        forEach(container.querySelectorAll('.toolbar-dropdown'), function (node) {
          node.onmouseover = hover_active_menubar;
          node.onclick = click_menubar;
        });
        forEach(container.querySelectorAll('.list-item'), function (node) {

          node.onclick = click_item;
        });




      }

      //foleder click





      /**
      * @constructor
      * @property {object} handlers The attached event handlers
      * @property {object} data The JSON object that represents the tree structure
      * @property {DOMElement} node The DOM element to render the tree in
      */
      function JetMenu(data, node) {
        this.handlers = {};
        this.node = node;
        this.data = data;
        render(this);
      }

      /**
      * Expands a leaflet by the expando or the leaf text
      * @param {DOMElement} node The parent node that contains the leaves
      * @param {DOMElement} leaves The leaves wrapper element
      */
      JetMenu.prototype.expand = function (node, leaves, skipEmit) {

        if (skipEmit) { return; }
        emit(this, 'expand', {
          target: node,
          leaves: leaves
        });
      };

      JetMenu.prototype.expandAll = function () {
        var self = this;
        var nodes = document.getElementById(self.node).querySelectorAll('.tree-expando');
        forEach(nodes, function (node) {
          var parent = node.parentNode;
          var leaves = parent.parentNode.querySelector('.tree-child-leaves');
          if (parent && leaves && parent.hasAttribute('data-item')) {
            self.expand(parent, leaves, true);
          }
        });
        emit(this, 'expandAll', {});
      };

      /**
      * Collapses a leaflet by the expando or the leaf text
      * @param {DOMElement} node The parent node that contains the leaves
      * @param {DOMElement} leaves The leaves wrapper element
      */
      JetMenu.prototype.collapse = function (node, leaves, skipEmit) {

        if (skipEmit) { return; }
        emit(this, 'collapse', {
          target: node,
          leaves: leaves
        });
      };

      /**
      */
      JetMenu.prototype.collapseAll = function () {
        var self = this;
        var nodes = document.getElementById(self.node).querySelectorAll('.tree-expando');
        forEach(nodes, function (node) {
          var parent = node.parentNode;
          var leaves = parent.parentNode.querySelector('.tree-child-leaves');
          if (parent && leaves && parent.hasAttribute('data-item')) {
            self.collapse(parent, leaves, true);
          }
        });
        emit(this, 'collapseAll', {});
      };

      /**
      * Attach an event handler to the tree view
      * @param {string} name Name of the event to attach
      * @param {function} callback The callback to execute on the event
      * @param {object} scope The context to call the callback with
      */
      JetMenu.prototype.on = function (name, callback, scope) {
        if (events.indexOf(name) > -1) {
          if (!this.handlers[name]) {
            this.handlers[name] = [];
          }
          this.handlers[name].push({
            callback: callback,
            context: scope
          });
        } else {
          throw new Error(name + ' is not supported by JetMenu.');
        }
      };

      /**
      * Deattach an event handler from the tree view
      * @param {string} name Name of the event to deattach
      * @param {function} callback The function to deattach
      */
      JetMenu.prototype.off = function (name, callback) {
        var index, found = false;
        if (this.handlers[name] instanceof Array) {
          this.handlers[name].forEach(function (handle, i) {
            index = i;
            if (handle.callback === callback && !found) {
              found = true;
            }
          });
          if (found) {
            this.handlers[name].splice(index, 1);
          }
        }
      };

      return JetMenu;
    }());
  }));
}(window.define));
