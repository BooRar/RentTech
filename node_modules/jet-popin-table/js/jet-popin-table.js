
(function (define) {
        'use strict';

        (function (root, factory) {
                if (typeof define === 'function' && define.amd) {
                        define(factory);
                } else if (typeof exports === 'object') {
                        module.exports = factory();
                } else {
                        root.jetPopinTable = factory();
                }
        }(window, function () {
                return (function () {




                        'use strict';


                        /**
                        * A forEach that will work with a NodeList and generic Arrays
                        * @param {array|NodeList} arr The array to iterate over
                        * @param {function} callback Function that executes for each element. First parameter is element, second is index
                        * @param {object} The context to execute callback with
                        */
                        // function forEach(arr, callback, scope) {
                        //         var i, len = arr.length;
                        //         //console.log(callback);
                        //
                        //         //for (i = 0; i < len; i += 1) {
                        //         //        console.log("looping for =-=-=-=-=");
                        //         callback.call(scope, arr, i);
                        //         //}
                        // }

                        /**
                        * A forEach that will work with a NodeList and generic Arrays
                        * @param {array|NodeList} arr The array to iterate over
                        * @param {function} callback Function that executes for each element. First parameter is element, second is index
                        * @param {object} The context to execute callback with
                        */
                        function forEach(arr, callback, scope) {
                                var i, len = arr.length;
                                for (i = 0; i < len; i += 1) {
                                        callback.call(scope, arr[i], i);
                                }
                        }
                        function isDOMElement(obj) {
                                try {
                                        return obj instanceof HTMLElement;
                                } catch (e) {
                                        // Some browsers don't support using the HTMLElement so some extra
                                        // checks are needed.
                                        return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
                                }
                        }




                        var events = [
                                'select',
                                'blur',
                                'focus',
                                'hover'
                        ];




                        var jetPopinTable = function()
                        {


                                function jetPopinTable(container , jsonStruct)
                                {
                                        //EVENT sETUPS
                                        this.handlers = {};
                                        //this.node = container;
                                        this.node = '';
                                        this.container = container;
                                        this.jsonStruct = jsonStruct;
                                        //console.log(jsonStruct,7754);
                                        this.cardGrid = "";
                                        this.inlet = "";
                                        this.DropdownContainer = '';
                                        this.baseContainerDimentions = '';
                                        this.menu ='';
                                        this.rowId ='';
                                        this.popupOffset ='';

                                        this.doLayout();
                                        this.applyStyle();
                                }
                                jetPopinTable.prototype.applyStyle = function()
                                {
                                        let amp = this.jsonStruct.settings.width;
                                        var style = document.createElement('style');
                                        style.type = 'text/css';
                                        style.innerHTML = `.container2 { grid-template-columns: `+this.jsonStruct.settings.columns+`; width : `+this.jsonStruct.settings.width+`; }`+
                                        `.dropdown-menu {                                        width: `+amp+`;                                        }`;

                                        document.getElementsByTagName('head')[0].appendChild(style);
                                }

                                jetPopinTable.prototype.emit=function (instance, name) {
                                        var args = [].slice.call(arguments, 2);
                                        var Textnodes;
                                        console.log(instance.DropdownContainer);
                                        if (events.indexOf(name) > -1) {
                                                // console.log("instance==================================");
                                                // console.log(instance);
                                                // //
                                                // console.log("name==================================");
                                                // console.log(name);

                                                if (instance.handlers[name] && instance.handlers[name] instanceof Array) {
                                                        console.log("Cocksucker is now working ");
                                                        forEach(instance.handlers[name], function (handle) {
                                                                window.setTimeout(function () {
                                                                        // console.log('============handle=====================');
                                                                        // console.log(handle);
                                                                        // console.log('============Callback=====================');
                                                                        // console.log(handle.callback);
                                                                        // console.log('============context=====================');
                                                                        // console.log(handle[0].context);
                                                                        handle.callback.apply(handle.context, args);

                                                                        //        console.log(name);
                                                                        // console.log("Cocksucker is now working ");
                                                                        if (name == 'select'){

                                                                                instance.DropdownContainer.classList.remove("open");
                                                                                //console.log("Cocksucker is now working ");

                                                                        }


                                                                }, 0);
                                                        });
                                                }
                                        } else {
                                                throw new Error(name + ' event cannot be found on jetPopinTable.');
                                        }
                                }.bind(this);


                                jetPopinTable.prototype.doLayout = function ()
                                {

                                        if (this.jsonStruct.settings.buttonNew==true){


                                                let superbutton = this.drawButton();
                                        }else {

                                                //jsonStruct.buttonSelectorList
                                                //
                                                //get the list and append the event
                                                //
                                                //console.log(this.jsonStruct.settings.buttonSelectorList,445);
                                                this.addEventToButtonList(this.jsonStruct.settings.buttonSelectorList);
                                        }


                                        // let container = this.dropDownMenu();

                                        // this.dropDownMenuItems(container);



                                        var click =function (e) {
                                                var parent = (e.target || e.currentTarget).parentNode;
                                                //  console.log(parent);
                                                // console.log("In the event thing" );
                                                var data = JSON.parse(parent.getAttribute('clickkey'));
                                                // console.log(data);
                                                // var leaves = parent.parentNode.querySelector('.tree-child-leaves');
                                                // if (leaves) {
                                                //         if (leaves.classList.contains('hidden')) {
                                                //                 self.expand(parent, leaves);
                                                //         } else {
                                                //                 self.collapse(parent, leaves);
                                                //         }
                                                // } else {
                                                //         console.log("--------------------------------------------");
                                                //         console.log("slef . parent :: "+ self.parent);
                                                //         console.log(" parent :: "+ parent);
                                                //         console.log("slef :: "+ self);
                                                //         console.log("E.target :: "+ e.target);
                                                //         console.log("--------------------------------------------");
                                                this.emit(this, 'select', {
                                                        target: e,
                                                        data: data,
                                                        parento :parent
                                                });
                                                // }
                                        }.bind(this);

                                        //                                         this.addEventListener('focus', (event) => {
                                        //   event.target.style.background = 'pink';
                                        // });
                                        //
                                        let mycontainre = document.getElementById(this.container);
                                        mycontainre.addEventListener('blur', (event) => {
                                                event.target.style.background = '';
                                                console.log("brittttutr");
                                        });




                                        //attack the events
                                        // forEach(self.data, function (item) {
                                        //         //var a;
                                        //         //a++;
                                        //         leaves.push(renderLeaf.call(self, item ,a));
                                        // });
                                        // container.innerHTML = leaves.map(function (leaf) {
                                        //         return leaf.outerHTML;
                                        // }).join('');
                                        //
                                        //
                                        //
                                        //

                                        // forEach(container.querySelectorAll('.container2'), function (node) {
                                        //         node.onclick = click;
                                        //         //  console.log(node.previousSibling);
                                        // });

                                }

                                jetPopinTable.prototype.drawButton = function()
                                {
                                        let baseContainer = document.getElementById(this.container);

                                        // <button class="btn btn-default dropdown-toggle" type="button" data-toggle="dropdown"
                                        // >Tutorials
                                        // <span class="caret"></span></button>
                                        let button = document.createElement("button");
                                        button.classList.add("btn");
                                        button.classList.add("btn-default");
                                        button.classList.add("dropdown-toggle");
                                        button.setAttribute("type","button");
                                        button.setAttribute("data-toggle","dropdown");
                                        button.innerHTML = this.jsonStruct.settings.buttonText;

                                        baseContainer.appendChild(button);

                                        button.onclick = function(e){
                                                var parent = (e.target || e.currentTarget).parentNode;
                                                //console.log('=============',parent);

                                                this.DropdownContainer = baseContainer;
                                                //this.DropdownContainer.classList.add("dropdown","open");
                                                if (this.DropdownContainer.classList.contains('open'))
                                                {
                                                        this.DropdownContainer.classList.remove("open");
                                                }else {
                                                        this.DropdownContainer.classList.add("dropdown","open");
                                                }



                                                //        console.log(baseContainer);
                                        }.bind(this);
                                }

                                //append the event to the existing list of buttons
                                //
                                jetPopinTable.prototype.addEventToButtonList = function(buttonList)
                                {
                                        let baseContainer = document.getElementById(this.container);
                                        //console.log('ButtonListEvents');
                                        //console.log(buttonList);
                                        let bttonListLength = buttonList.length;


                                        for (let x = 0 ; x < bttonListLength ;x++)
                                        {
                                                //console.log(buttonList[x]);
                                                let button = document.getElementById(buttonList[x]);


                                                button.onclick = function(e){


                                                        let tags = e.target.tagName;
                                                        //console.log(tags, '==================================');
                                                        if (tags == 'BUTTON'){
                                                                //console.log('your bet is working');
                                                                var parent = (e.target || e.currentTarget).parentNode;
                                                                this.container = e.target.parentNode.parentNode;
                                                        }else {
                                                                var parent = (e.target || e.currentTarget).parentNode.parentNode;
                                                                this.container = e.target.parentNode.parentNode.parentNode;
                                                        }


                                                        //console.log(button.getAttribute('value') ,556777);
                                                        this.rowId = button.getAttribute('value');
                                                        //button.getAttribute('value');

                                                        this.DropdownContainer = baseContainer;


                                                        //half the clientHeight
                                                        let parentEmbed = document.getElementById('accountR11')
                                                        let ParentWidth = parentEmbed.clientWidth;
                                                        let parentLeft = parentEmbed.getBoundingClientRect().left;

                                                        let widthFromSettings = this.jsonStruct.settings.width;
                                                        let difference = (ParentWidth - widthFromSettings);
                                                        let withoutPX = widthFromSettings.slice(0, -2);
                                                        let halfMenu = withoutPX/2;
                                                        // console.log('=========================================');
                                                        // console.log(this.jsonStruct.settings.width)
                                                        // console.log(halfMenu);


                                                        //lets get the bounding box of this container
                                                        let bttnPosLeft = this.container.getBoundingClientRect().left;
                                                        //  console.log(bttnPosLeft,'Button Left' );
                                                        let offset = bttnPosLeft-parentLeft;
                                                        //  console.log(offset,'parent less Button Left' );
                                                        //half the width minus the offset
                                                        let halfwidthlessoffset = ParentWidth/2 -offset;
                                                        //  console.log(halfwidthlessoffset,'HalfWidthlessOffset');
                                                        //subtract half the popup
                                                        let finalPos = halfwidthlessoffset-halfMenu;
                                                        //   console.log(finalPos,'Final left setting');
                                                        this.popupOffset = finalPos;


                                                        //There was a performance issue so we asked for the animation frame before continuing the layout
                                                        //[Violation] Forced reflow while executing JavaScript took 42ms
                                                        //To resolve this we used the code bellow.

                                                        let container = window.requestAnimationFrame(this.dropDownMenu.bind(this));



                                                }.bind(this);
                                                this.button = button;






                                        }


                                }


                                //create the drop down container
                                //
                                jetPopinTable.prototype.dropDownMenu = function()
                                {



                                        let baseContainer = this.container;

                                        let foo = document.createElement('div');
                                        foo.setAttribute('style','background-color:green;position:absolute');

                                        baseContainer.appendChild(foo);



                                        let ulMenu = document.createElement('ul');
                                        ulMenu.setAttribute('id','PopipMenu');

                                        //Assist the blur event
                                        ulMenu.setAttribute('tabindex',"0");
                                        //var att = document.createAttribute("contentEditable");
                                        //ulMenu.setAttributeNode(att);

                                        ulMenu.classList.add( 'dropdown-menu');
                                        ulMenu.setAttribute('style','left:'+this.popupOffset+'px');
                                        //console.log(this.popupOffset ,77777);

                                        foo.appendChild(ulMenu);
                                        this.menu = ulMenu;

                                        this.dropDownMenuItems(ulMenu );







                                }
                                jetPopinTable.prototype.dropDownMenuItems = function(container)
                                {
                                        // get the data list
                                        //
                                        //console.log(this.jsonStruct.properties)
                                        //var container = this.menu;
                                        //console.log(this.menu , 23333);

                                        let length = this.jsonStruct.properties.length;
                                        let dataArray = this.jsonStruct.properties;
                                        for (let x = 0 ; x< length ;x++)
                                        {

                                                // creat the li tag then the div link
                                                //
                                                //

                                                let li = document.createElement('li');
                                                li.classList.add("container2");
                                                li.setAttribute("clickKey",dataArray[x].id);
                                                container.appendChild(li)
                                                //console.log(Object.keys(dataArray[x]));
                                                //now itterate the keus
                                                let arrayKeysCount = Object.keys(dataArray[x]).length;
                                                let names  = Object.keys(dataArray[x])

                                                for (var key in names) {
                                                        //console.log(names[key]);
                                                        //console.log( dataArray[x][names[key]]);

                                                        let div = document.createElement('div');
                                                        div.classList.add("grid-item");
                                                        div.innerHTML = dataArray[x][names[key]];
                                                        li.appendChild(div);
                                                }




                                        }

                                        let container2 = container.querySelectorAll('.container2');
                                        //console.log(container2,566);
                                        for (let x=0 ;x<container2.length ;x++ )

                                        {
                                                container2[x].onclick = function()
                                                {
                                                        let mykey = container2[x].getAttribute('clickkey');
                                                        //console.log(container2[x].querySelectorAll('.grid-item')[3].innerHTML,2203);
                                                        let myAddress = container2[x].querySelectorAll('.grid-item')[3].innerHTML;
                                                        //        console.log(container2[x].parentNode.parentNode.parentNode.getElementsByTagName('button')[0].getAttribute('value'));
                                                        //        console.log('The Event Registered internally and the clickkey ='+ mykey);

                                                        //fet the element we going to update from . rigFromdropdown
                                                        //
                                                        //console.log();
                                                        let rowId = 'rigfromDropdown'+ this.rowId;
                                                        //console.log(rowId,45345);
                                                        let TextBoxParalell  = document.getElementById(rowId);
                                        //console.log(TextBoxParalell,43444777777);
                                        TextBoxParalell.setAttribute('name','depositId_'+this.rowId+'_property') ;
                                                        TextBoxParalell.value = mykey;
                                                        console.log(TextBoxParalell,43444777777);


                                                        //AddressDisplay
                                                        let address = 'AddressDisplay'+ this.rowId;
                                                        //console.log(rowId,45345);
                                                        let TextBoxParalell2  = document.getElementById(address);
                                                        TextBoxParalell2.value = myAddress;

                                                        //                        container.parentNode.remove();
                                                        container.blur();
                                                }.bind(this);

                                                let PopipMenu = document.getElementById('PopipMenu')


                                                //Make the menu dissapear when the user clicks out

                                                container.onmouseover  = function(){
                                                        container.focus();

                                                }
                                                container.onblur = function(){

                                                        container.parentNode.remove();

                                                }

                                        }







                                }







                                jetPopinTable.prototype.on = function (name, callback, scope) {
                                        if (events.indexOf(name) > -1) {

                                                //console.log(this);
                                                if (!this.handlers[name]) {
                                                        this.handlers[name] = [];
                                                }
                                                this.handlers[name].push({
                                                        callback: callback,
                                                        context: scope
                                                });
                                        } else {
                                                throw new Error(name + ' is not supported by jetTreeView.');
                                        }
                                };

                                return jetPopinTable;

                        }();
                        return jetPopinTable;
                }());
                return jetPopinTable;
        }));
}(window.define));
