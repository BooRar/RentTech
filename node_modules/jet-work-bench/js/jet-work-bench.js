

(function (define) {
    'use strict';

    (function (root, factory) {
        if (typeof define === 'function' && define.amd) {
            define(factory);
        } else if (typeof exports === 'object') {
            module.exports = factory();
        } else {
            root.jetWorkBench = factory();
        }
    }(window, function () {
        return (function () {





/** List of events supported by the tree view */
var events = [
    'expand',
    'select'
];


var globalEventInstance = {};

/**
* A forEach that will work with a NodeList and generic Arrays
* @param {array|NodeList} arr The array to iterate over
* @param {function} callback Function that executes for each element. First parameter is element, second is index
* @param {object} The context to execute callback with
*/
function forEach(arr, callback, scope) {
    var i, len = arr.length;
    for (i = 0; i < len; i += 1) {
        callback.call(scope, arr[i], i);
    }
}







var jetWorkBench = function(){

    /**
    * Emit an event from the tree view
    * @param {string} name The name of the event to emit
    */
    function emit(instance, name) {
        // console.log('==================================');
        // console.log(instance );
        // console.log(jetWorkBench );
        var args = [].slice.call(arguments, 2);
        var Textnodes;
        if (events.indexOf(name) > -1) {
            if (instance.handlers[name] && instance.handlers[name] instanceof Array) {
                forEach(instance.handlers[name], function (handle) {
                    window.setTimeout(function () {
                        handle.callback.apply(handle.context, args);
                        //  console.log(args);
                        //    console.log(args[0].data.myEvent);// extracting the event parameter
                        //1) apply a style to the selected
                        //2) perform a fuction

                        if (name == 'select'){

                            // console.log("working ");
                        }


                    }, 0);
                });
            }
        } else {
            throw new Error(name + ' event cannot be found on jetTreeView.');
        }
    }





    function jetWorkBench(jsonData,Div)

    {
        this.handlers = {};
        this.fun = {};
        // console.log("first Do");
        var jsonData = jsonData ;
        // console.log(Div);
        jetWorkBench.doLayout(Div,jsonData);
    }


    jetWorkBench.listcontaier = function(Div)
    {

        var cont = document.createElement("ul");
        cont.classList.add("flex-container");
        cont.classList.add("wrap");
        //    console.log(Div);
        Div.appendChild(cont);

        return cont;

    }

    jetWorkBench.listItem= function(Container,jsonData)
    {


        //console.log(jsonData);

        for (let x = 0 ; x < jsonData.ListElements.length ; x++){
            //console.log("Run");

            var listItem = document.createElement("li");
            listItem.classList.add("flex-item");
            listItem.setAttribute('data-item', JSON.stringify(jsonData.ListElements[x]));

            var icon = document.createElement("i");
            var f = jsonData.ListElements[x].icon;

            //usinf the spread argument allows you to use an array in an as an arguments list
            icon.classList.add(...f);

            // icon.classList.add("fab");
            // icon.classList.add("fa-500px");
            // icon.classList.add("fa-3x");


            var header = document.createElement("h6")
            header.classList.add("canvasoption__title");

            header.innerHTML = jsonData.ListElements[x].title;

            var description = document.createElement("div")
            description.classList.add("canvasoption__descr");
            description.classList.add("ng-scope");
            description.classList.add("ng-binding");


            description.innerHTML=jsonData.ListElements[x].description;

            Container.appendChild(listItem);
            listItem.appendChild(icon);
            listItem.appendChild(header);
            listItem.appendChild(description);
        }

    }



    var click = function (e) {
        var parent = (e.target || e.currentTarget).parentNode;

        // console.log("click ");
        // console.log("--------------------------------------------");
        // console.log(e);
        // console.log(parent);
        // console.log(e.target);
        // console.log("--------------------------------------------");

        var data = {};

        if (e.target.hasAttribute('data-item'))
        {

            data = JSON.parse(e.target.getAttribute('data-item'));

        }else if (parent.hasAttribute('data-item')) {

            data = JSON.parse(parent.getAttribute('data-item'));
        }


        emit(globalEventInstance, 'select', {
            target: e,
            data: data,
            parento :parent
        });
    }

    jetWorkBench.doLayout = function (Div,jsonData)
    {
        //console.log("------------------------------------------");
        //console.log(jsonData);
        var container = jetWorkBench.listcontaier(Div);
        jetWorkBench.listItem(container,jsonData);

        forEach(document.querySelectorAll('.flex-item'), function (node) {
            node.onclick = click;
            // console.log("foreach run ");
        });





        jetWorkBench.prototype.on = function (name, callback, scope) {
            // console.log("jetWorkBench prototype...");
            this.fun = this;
            globalEventInstance = this;
            if (events.indexOf(name) > -1) {
                //console.log("fuuuuuuuuuuuuuuuuuuuuuuck ");
                // console.log(this);// underfined
                //                console.log(events.indexOf(name));// underfined
                //console.log("fuuuuuuuuuuuuuuuuuuuuuuck ");
                if (!this.handlers[name]) {
                    this.handlers[name] = [];
                }
                this.handlers[name].push({
                    callback: callback,
                    context: scope
                });
                // console.log(this);// underfined
            } else {
                throw new Error(name + ' is not supported by jetWorkBench.');
            }
        };

    }



    return jetWorkBench;
}();
return jetWorkBench;
}());
}));
}(window.define));


//var tap = new jetWorkBench("foo");
//tap.jetWorkBench("foo");
