
(function (define) {
        'use strict';

        (function (root, factory) {
                if (typeof define === 'function' && define.amd) {
                        define(factory);
                } else if (typeof exports === 'object') {
                        module.exports = factory();
                } else {
                        root.jetInfoCards = factory();
                }
        }(window, function () {
                return (function () {




                        'use strict';


                        /**
                        * A forEach that will work with a NodeList and generic Arrays
                        * @param {array|NodeList} arr The array to iterate over
                        * @param {function} callback Function that executes for each element. First parameter is element, second is index
                        * @param {object} The context to execute callback with
                        */
                        function forEach(arr, callback, scope) {
                                var i, len = arr.length;
                                //console.log(callback);

                                //for (i = 0; i < len; i += 1) {
                                //        console.log("looping for =-=-=-=-=");
                                callback.call(scope, arr, i);
                                //}
                        }


                        function isDOMElement(obj) {
                                try {
                                        return obj instanceof HTMLElement;
                                } catch (e) {
                                        // Some browsers don't support using the HTMLElement so some extra
                                        // checks are needed.
                                        return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
                                }
                        }




                        var events = [
                                'select'
                        ];




                        var jetInfoCards = function()
                        {


                                function jetInfoCards(container , jsonStruct)
                                {
                                        //EVENT sETUPS
                                        this.handlers = {};
                                        //this.node = container;
                                        this.node = '';
                                        this.container = container;
                                        this.jsonStruct = jsonStruct;
                                        this.cardGrid = "";
                                        this.inlet = "";
                                        this.doLayout();
                                }
                                jetInfoCards.prototype.emit=function (instance, name) {
                                        var args = [].slice.call(arguments, 2);
                                        var Textnodes;
                                        if (events.indexOf(name) > -1) {
                                                // console.log("instance==================================");
                                                // console.log(instance);
                                                //
                                                // console.log("name==================================");
                                                // console.log(name);

                                                if (instance.handlers[name] && instance.handlers[name] instanceof Array) {
                                                        forEach(instance.handlers[name], function (handle) {
                                                                window.setTimeout(function () {
                                                                        // console.log('============handle=====================');
                                                                        // console.log(handle);
                                                                        // console.log('============Callback=====================');
                                                                        // console.log(handle[0].callback);
                                                                        // console.log('============context=====================');
                                                                        // console.log(handle[0].context);
                                                                        handle[0].callback.apply(handle[0].context, args);

                                                                        //        console.log(name);

                                                                        if (name == 'select'){

                                                                                //        console.log("Cocksucker is now working ");

                                                                        }


                                                                }, 0);
                                                        });
                                                }
                                        } else {
                                                throw new Error(name + ' event cannot be found on jetInfoCards.');
                                        }
                                }
                                jetInfoCards.prototype.doLayout = function ()
                                {
                                        let i ;
                                        this.createCardGrid(self);
                                        //forecach of the cards in the jsonStruct
                                        //
                                        for (i=0 ; i< this.jsonStruct.cards.length ;i++)
                                        {

                                                //        this.creatCards(this.jsonStruct.cards[i]);
                                                //
                                                this.createCard(self,this.jsonStruct.cards[i]);
                                        }


                                        //var self = this;


                                        var selctBoo;

                                        //this.node = document.querySelectorAll('.cards');
                                        this.node = document.getElementById('row-grid');//.querySelectorAll('.stack');
                                        var containerX = isDOMElement(this.node) ? this.node : document.getElementById(this.node);
                                        //var nodes = document.getElementById(this.node).querySelectorAll('.cards');

                                        //console.log(this.node);


                                        var selectNode = function (e) {

                                                var parent = (e.target || e.currentTarget);

                                                /*
                                                NOTE :
                                                Nbrilliant function to itterate the dom upwards
                                                find a class that the emitter can attach an data-item
                                                */
                                                function findAncestor (el, cls) {
                                                        while ((el = el.parentElement) && !el.classList.contains(cls));
                                                        return el;
                                                }

                                                if (parent.classList.contains('row-grid'))
                                                {
                                                        //console.log("you clicked the grid ignore click");
                                                        return;
                                                }
                                                if (parent.classList.contains('grid-item'))
                                                {
                                                        //console.log("horraaaaa");
                                                        //return 1;
                                                }else {
                                                        //console.log("is the screaming child ");
                                                        //parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;
                                                        parent = findAncestor (parent, 'grid-item');
                                                }


                                                var data = JSON.parse(parent.getAttribute('data-item'));

                                                this.emit(this, 'select', {
                                                        target: e,
                                                        data:data,
                                                        parento :parent
                                                });

                                        }.bind(this);




                                        forEach(containerX, function (node) {
                                                //        console.log('+++++++++++++++++ NODES +++++++++++++++++++++');
                                                //        console.log(node);
                                                node.onclick = selectNode;


                                        });




                                }
                                jetInfoCards.prototype.createCardGrid=function(sel,cardData)
                                {
                                        //console.log("cardGrid loading");
                                        let obj = document.getElementById( this.container);

                                        let grid = document.createElement('div');
                                        grid.classList.add('row-grid');
                                        grid.setAttribute('id','row-grid');


                                        obj.appendChild(grid);

                                        this.cardGrid = grid;
                                }
                                jetInfoCards.prototype.createCard=function(sel,cardData)
                                {
                                        let gridItem = document.createElement('div');
                                        gridItem.classList.add('grid-item');
                                        let t = {jetFunction:cardData.jetFunction , jetFunctionParams:cardData.jetFunctionParams};

                                        gridItem.setAttribute('data-item',JSON.stringify(t))


                                        let ico = document.createElement('i');
                                        ico.setAttribute('class',cardData.icon);
                                        ico.setAttribute('style','color:#d0d4ff; ');

                                        let heading = document.createElement('h3');





                                        let    inlet =document.createElement('div');
                                        inlet.classList.add('inlet');

                                        this.cardGrid.appendChild(gridItem);

                                        heading.appendChild(ico)
gridItem.appendChild(heading);
heading.innerHTML +=" \t"+cardData.Name +"<br>";
                                        gridItem.appendChild(inlet);



                                        this.inlet = inlet;


                                        //console.log(Object.keys(cardData.Fields).length);
                                        /*NOTE:
                                        The ES6 way to loop through objects with vanilla JavaScript
                                        'Bind' to make this availible
                                        */
                                        Object.keys(cardData.Fields).forEach(function (item) {
                                                // console.log(item); // key
                                                // console.log(cardData.Fields[item]); // value
                                                // console.log(this);
                                                this.addFields(item,cardData.Fields[item]);
                                        }.bind(this));



                                }

                                jetInfoCards.prototype.addFields = function (key,value)
                                {

                                        let keyDiv = document.createElement('div');
                                        keyDiv.classList.add('plain');
                                        keyDiv.innerHTML = key;

                                        let valDiv = document.createElement('div');
                                        valDiv.classList.add('timestamp');
                                        valDiv.innerHTML = value;


                                        this.inlet.appendChild(keyDiv);
                                        this.inlet.appendChild(valDiv);


                                }





                                jetInfoCards.prototype.on = function (name, callback, scope) {
                                        if (events.indexOf(name) > -1) {

                                                //console.log(this);
                                                if (!this.handlers[name]) {
                                                        this.handlers[name] = [];
                                                }
                                                this.handlers[name].push({
                                                        callback: callback,
                                                        context: scope
                                                });
                                        } else {
                                                throw new Error(name + ' is not supported by jetTreeView.');
                                        }
                                };

                                return jetInfoCards;

                        }();
                        return jetInfoCards;
                }());
        }));
}(window.define));
