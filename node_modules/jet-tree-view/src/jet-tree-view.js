
(function (define) {
        'use strict';

        (function (root, factory) {
                if (typeof define === 'function' && define.amd) {
                        define(factory);
                } else if (typeof exports === 'object') {
                        module.exports = factory();
                } else {
                        root.jetTreeView = factory();
                }
        }(window, function () {
                return (function () {

                        /** List of events supported by the tree view */
                        var events = [
                                'expand',
                                'expandAll',
                                'collapse',
                                'collapseAll',
                                'select2'
                        ];

                        /**
                        * A utilite function to check to see if something is a DOM object
                        * @param {object} Object to test
                        * @returns {boolean} If the object is a DOM object
                        */
                        function isDOMElement(obj) {
                                try {
                                        return obj instanceof HTMLElement;
                                } catch (e) {
                                        // Some browsers don't support using the HTMLElement so some extra
                                        // checks are needed.
                                        return typeof obj === 'object' && obj.nodeType === 1 && typeof obj.style === 'object' && typeof obj.ownerDocument === 'object';
                                }
                        }

                        /**
                        * A forEach that will work with a NodeList and generic Arrays
                        * @param {array|NodeList} arr The array to iterate over
                        * @param {function} callback Function that executes for each element. First parameter is element, second is index
                        * @param {object} The context to execute callback with
                        */
                        function forEach(arr, callback, scope) {
                                var i, len = arr.length;
                                for (i = 0; i < len; i += 1) {
                                        callback.call(scope, arr[i], i);
                                }
                        }

                        /**
                        * Emit an event from the tree view
                        * @param {string} name The name of the event to emit
                        */
                        function emit(instance, name) {
                                var args = [].slice.call(arguments, 2);
                                var Textnodes;
                                if (events.indexOf(name) > -1) {
                                        if (instance.handlers[name] && instance.handlers[name] instanceof Array) {
                                                forEach(instance.handlers[name], function (handle) {
                                                        window.setTimeout(function () {
                                                                handle.callback.apply(handle.context, args);
                                                                //  console.log(args);
                                                                //    console.log(args[0].data.myEvent);// extracting the event parameter
                                                                //1) apply a style to the selected
                                                                //2) perform a fuction

                                                                if (name == 'select2'){

                                                                        //  console.log('Its a select Statement');
                                                                        //    if (args[0].data.myEvent =='speak' )
                                                                        //    {
                                                                        //    console.log(args[0].parento);
                                                                        let highlightedNodes =     document.querySelectorAll('.tree-leaf-content');
                                                                        let number=highlightedNodes.length;
                                                                        //console.log(highlightedNodes);
                                                                        for(let i =0; i<number ; i++)
                                                                        {
                                                                                // highlightedNodes[i].removeAttribute('style');
                                                                                highlightedNodes[i].classList.remove("SelectedStyle");
                                                                                //Textnodes.removeAttribute('style');
                                                                                //  console.log(Textnodes);
                                                                        }
                                                                        //highlightedNodes.removeAttribute("style");
                                                                        //args[0].parento.style="background-color :rgb(49, 54, 63)";
                                                                        //console.log("00000000000000000000000000");
                                                                        //console.log(args[0].parento);
                                                                        if (args[0].parento == null ){

                                                                        //args[0].parento.classList.add("SelectedStyle");


                                                                }else{
                                                                          args[0].parento.classList.add("SelectedStyle");}
                                                                }


                                                        }, 0);
                                                });
                                        }
                                } else {
                                        throw new Error(name + ' event cannot be found on jetTreeView.');
                                }
                        }

                        /**
                        * Renders the tree view in the DOM
                        */
                        function render(self) {
                                var container = isDOMElement(self.node) ? self.node : document.getElementById(self.node);
                                var leaves = [], click ,clicko ,clickFolder, clickBackground;
                                var a =0 ;
                                var renderLeaf = function (item,a) {

                                        //console.log('----------'+ a);

                                        var leaf = document.createElement('div');
                                        var content = document.createElement('div');
                                        var text = document.createElement('span');
                                        var tinyText = document.createElement('span');
                                        //var expando = document.createElement('div');
                                        var expando = document.createElement('md-icon');

                                        let frag = document.createRange().createContextualFragment('<?xml version="1.0" encoding="iso-8859-1" ?><svg height="15" width="15" ><polygon points="0,0 0,12 12,6" class="interchange" ></polygon></svg>');
                                        var iconFolder = document.createRange().createContextualFragment('<img  alt="Smiley face" class="file-expando filee" style="float:left">');
                                        var iconFolder2 = document.createElement('img');
                                        let iconFile = document.createRange().createContextualFragment('<img src="./img/fileIcon.png" alt="Smiley face" class="tree-leaf-text" style="float:left">');





                                        leaf.setAttribute('class', 'tree-leaf');
                                        content.setAttribute('class', 'tree-leaf-content');
                                        content.setAttribute('data-item', JSON.stringify(item));
                                        text.setAttribute('class', 'tree-leaf-text');
                                        tinyText.setAttribute('class', 'tree-leaf-text');
                                        text.textContent = item.name;

                                        //    console.log(item.name);

                                        //--------------------------------------------
                                        var space =  document.createElement('span');
                                        space.innerHTML= '&nbsp ';
                                        space.classList.add('indent');
                                        var space2 =  document.createElement('span');
                                        space2.innerHTML= ' &nbsp ';
                                        space2.classList.add('indent');
                                        var space3 =  document.createElement('span');
                                        space3.innerHTML= ' &nbsp ';
                                        space3.classList.add('indent');
                                        // content.insertAdjacentElement("afterbegin", space);//('beforebegin','space');
                                        // content.insertBefore(space, content.firstChild);
                                        //leaf.insertAdjacentElement("afterbegin", space);//('beforebegin','space');
                                        //leaf.insertBefore(space, content.firstChild);
                                        //-------------------------------------------------

                                        if (a == 1){
                                                content.appendChild(space);
                                        }
                                        if (a == 2){
                                                content.appendChild(space);
                                                content.appendChild(space2);
                                        }
                                        if (a == 3){
                                                content.appendChild(space);
                                                content.appendChild(space2);
                                                content.appendChild(space3);
                                        }

                                        expando.setAttribute('class', 'tree-expando ' + (item.expanded ? 'expanded' : ''));
                                        //  expando.textContent = item.expanded ? '-' : '+';

                                        content.appendChild(expando);


                                        expando.appendChild(frag);
                                        content.appendChild(iconFolder2);
                                        //text.append(iconFolder);
                                        content.appendChild(text);
                                        //text.appendChild(tinyText);
                                        //

                                        leaf.appendChild(content);

                                        let thefold = expando.querySelector('.interchange');
                                        thefold.classList.add("forpla") ;


                                        if (item.children && item.children.length > 0) {
                                                var children = document.createElement('div');
                                                children.setAttribute('class', 'tree-child-leaves');
                                                //the space
                                                // children.insertAdjacentElement("afterbegin", space);//('beforebegin','space');
                                                // children.insertBefore(space, children.firstChild);
                                                //
                                                //    children.appendChild(space);
                                                a++;
                                                forEach(item.children, function (child) {
                                                        //new stuff ===================================
                                                        // var space =  document.createElement('span');
                                                        // space.classList.add('indent');
                                                        // children.appendChild(space);

                                                        var childLeaf = renderLeaf(child ,a);
                                                        //syntax for the folder
                                                        iconFolder2.setAttribute('src', './img/folderIcon.svg');
                                                        iconFolder2.setAttribute('class', 'file-expando');
                                                        //  text.appendChild(tinyText);
                                                        //
                                                        // var space =  document.createElement('div');
                                                        // space.innerHTML= '-------------';
                                                        // space.classList.add('indent');
                                                        //     children.appendChild(space);

                                                        children.appendChild(childLeaf);

                                                        //childLeaf.insertAdjacentElement("afterbegin", space);//('beforebegin','space');
                                                        //childLeaf.insertBefore(space, childLeaf.firstChild);
                                                        //


                                                });

                                                if (!item.expanded) {
                                                        children.classList.add('hidden');
                                                }
                                                leaf.appendChild(children);
                                        } else {
                                                expando.classList.add('hidden');
                                                //text.appendChild(iconFile);
                                                iconFolder2.setAttribute('src', './img/fileicon.svg');
                                                iconFolder2.setAttribute('class', 'tree-leaf-text filo');


                                        }
                                        return leaf;
                                };

                                forEach(self.data, function (item) {
                                        //var a;
                                        //a++;
                                        leaves.push(renderLeaf.call(self, item ,a));
                                });
                                container.innerHTML = leaves.map(function (leaf) {
                                        return leaf.outerHTML;
                                }).join('');







                                click = function (e) {

                                        var parent = (e.target || e.currentTarget);

                                        var data = JSON.parse(parent.getAttribute('data-item'));

                                        if(data == null){

                                                parent = (e.target || e.currentTarget).parentNode;
                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                if(data == null){
                                                        parent = (e.target || e.currentTarget).parentNode.parentNode;
                                                        data = JSON.parse(parent.getAttribute('data-item'));;
                                                        if(data == null){
                                                                parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;
                                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                                if(data == null){
                                                                        parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode.parentNode;
                                                                        data = JSON.parse(parent.getAttribute('data-item'));
                                                                }
                                                        }
                                                }
                                        }

                                        //var parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;


                                        // console.log('+++++++++ Parent +++++++++++++');
                                        // console.log(parent);
                                        // //var data = JSON.parse(parent.getAttribute('data-item'));
                                        // console.log(" The data =============");
                                        // console.log(data);



                                        var leaves = parent.querySelector('.tree-child-leaves');
                                        // console.log('-----------Click Expando');
                                        // console.log(self);

                                        if (leaves) {
                                                if (leaves.classList.contains('hidden')) {
                                                        self.expand(parent, leaves);
                                                } else {
                                                        self.collapse(parent, leaves);
                                                }
                                        }
                                         else {

                                            emit(self, 'select2', {
                                                target: e,
                                                data: data
                                                //parento :parent
                                            });
                                        }
                                };
                                //Jono add folder click

                                clicko = function (e) {
                                        //var parent = (e.target || e.currentTarget).previousSibling.parentNode;
                                        // console.log(parent);
                                        //var data = JSON.parse(parent.getAttribute('data-item'));
                                        var parent = (e.target || e.currentTarget);

                                        var data = JSON.parse(parent.getAttribute('data-item'));

                                        if(data == null){

                                                parent = (e.target || e.currentTarget).parentNode;
                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                if(data == null){
                                                        parent = (e.target || e.currentTarget).parentNode.parentNode;
                                                        data = JSON.parse(parent.getAttribute('data-item'));;
                                                        if(data == null){
                                                                parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;
                                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                                if(data == null){
                                                                        parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode.parentNode;
                                                                        data = JSON.parse(parent.getAttribute('data-item'));
                                                                }
                                                        }
                                                }
                                        }

                                        var leaves = parent.querySelector('.tree-child-leaves');

                                        // console.log('-----------Clicko Name');
                                        // console.log(self);
                                        if (leaves) {
                                                if (leaves.classList.contains('hidden')) {
                                                        self.expand(parent, leaves);
                                                } else {
                                                        self.collapse(parent, leaves);
                                                        //  console.log("epitorum run my funct");
                                                }
                                        } else {
                                                emit(self, 'select2', {
                                                        target: e,
                                                        data: data
                                                        //parento :parent
                                                });
                                        }
                                };



                                clickFolder = function (e) {
                                        var parent = (e.target || e.currentTarget).parentNode;
                                        // console.log(parent);
                                        var data = JSON.parse(parent.getAttribute('data-item'));
                                        var leaves = parent.parentNode.querySelector('.tree-child-leaves');

                                        // console.log('-----------ClickFolder Name');
                                        // console.log(self);
                                        if (leaves) {
                                                if (leaves.classList.contains('hidden')) {
                                                        self.expand(parent, leaves);
                                                } else {
                                                        self.collapse(parent, leaves);
                                                        //    console.log("epitorum run my funct");
                                                }
                                        } else {
                                                emit(self, 'select2', {
                                                        target: e,
                                                        data: data,
                                                        parento :parent
                                                });
                                        }
                                };

                                clickBackground= function (e) {
                                        var parent = (e.target || e.currentTarget);

                                        var data = JSON.parse(parent.getAttribute('data-item'));

                                        if(data == null){

                                                parent = (e.target || e.currentTarget).parentNode;
                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                if(data == null){
                                                        parent = (e.target || e.currentTarget).parentNode.parentNode;
                                                        data = JSON.parse(parent.getAttribute('data-item'));;
                                                        if(data == null){
                                                                parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode;
                                                                data = JSON.parse(parent.getAttribute('data-item'));
                                                                if(data == null){
                                                                        parent = (e.target || e.currentTarget).parentNode.parentNode.parentNode.parentNode;
                                                                        data = JSON.parse(parent.getAttribute('data-item'));
                                                                }
                                                        }
                                                }
                                        }

                                        // console.log('=====Parent========');
                                        // console.log(parent);

                                        var leaves = parent.parentNode.querySelector('.tree-child-leaves');
                                        // console.log('-----------ClickBackground ');
                                        // console.log(leaves);

                                        if (leaves) {
                                                if (leaves.classList.contains('hidden')) {
                                                        self.expand(parent, leaves);
                                                } else {
                                                        self.collapse(parent, leaves);

                                                }
                                        } else {
                                                emit(self, 'select2', {
                                                        target: e,
                                                        data: data,
                                                        parento :parent
                                                });
                                        }
                                };


                                forEach(container.querySelectorAll('.tree-leaf-text'), function (node) {
                                        node.onclick = clicko;
                                        //  console.log(node.previousSibling);
                                });
                                forEach(container.querySelectorAll('.tree-expando'), function (node) {
                                        node.onclick = click;
                                        //  node.onclick = clickBackground;
                                });

                                forEach(container.querySelectorAll('.file-expando'), function (node) {
                                        node.onclick = clickFolder;
                                });
                                forEach(container.querySelectorAll('.tree-leaf-content'), function (node) {
                                        node.onclick = clickBackground;
                                });

                        }

                        //foleder click





                        /**
                        * @constructor
                        * @property {object} handlers The attached event handlers
                        * @property {object} data The JSON object that represents the tree structure
                        * @property {DOMElement} node The DOM element to render the tree in
                        */
                        function jetTreeView(data, node) {
                                this.handlers = {};
                                this.node = node;
                                this.data = data;
                                render(this);
                        }

                        /**
                        * Expands a leaflet by the expando or the leaf text
                        * @param {DOMElement} node The parent node that contains the leaves
                        * @param {DOMElement} leaves The leaves wrapper element
                        */
                        jetTreeView.prototype.expand = function (node, leaves, skipEmit) {
                                var expando = node.querySelector('.tree-expando');

                                let thefold = node.querySelector('.interchange');
                                let text =node.querySelector('.tree-leaf-text');
                                let foldImage =node.querySelector('.file-expando');



                                expando.classList.add("rotated") ;
                                text.classList.add("selected-text") ;
                                foldImage.classList.add("selected-folder") ;

                                thefold.classList.add("forpla2") ;
                                thefold.classList.remove("forpla") ;
                                leaves.classList.remove('hidden');
                                if (skipEmit) { return; }
                                emit(this, 'expand', {
                                        target: node,
                                        leaves: leaves
                                });
                        };

                        jetTreeView.prototype.expandAll = function () {
                                var self = this;
                                var nodes = document.getElementById(self.node).querySelectorAll('.tree-expando');
                                forEach(nodes, function (node) {
                                        var parent = node.parentNode;
                                        var leaves = parent.parentNode.querySelector('.tree-child-leaves');
                                        if (parent && leaves && parent.hasAttribute('data-item')) {
                                                self.expand(parent, leaves, true);
                                        }
                                });
                                emit(this, 'expandAll', {});
                        };

                        /**
                        * Collapses a leaflet by the expando or the leaf text
                        * @param {DOMElement} node The parent node that contains the leaves
                        * @param {DOMElement} leaves The leaves wrapper element
                        */
                        jetTreeView.prototype.collapse = function (node, leaves, skipEmit) {
                                var expando = node.querySelector('.tree-expando');
                                let thefold = expando.querySelector('.interchange');
                                let text1 =node.querySelector('.tree-leaf-text');
                                let foldImage =node.querySelector('.file-expando');

                                foldImage.classList.remove("selected-folder") ;
                                text1.classList.remove("selected-text") ;
                                expando.classList.remove("rotated") ;
                                thefold.classList.remove("forpla2") ;
                                thefold.classList.add("forpla") ;

                                leaves.classList.add('hidden');
                                if (skipEmit) { return; }
                                emit(this, 'collapse', {
                                        target: node,
                                        leaves: leaves
                                });
                        };

                        /**
                        */
                        jetTreeView.prototype.collapseAll = function () {
                                var self = this;
                                var nodes = document.getElementById(self.node).querySelectorAll('.tree-expando');
                                forEach(nodes, function (node) {
                                        var parent = node.parentNode;
                                        var leaves = parent.parentNode.querySelector('.tree-child-leaves');
                                        if (parent && leaves && parent.hasAttribute('data-item')) {
                                                self.collapse(parent, leaves, true);
                                        }
                                });
                                emit(this, 'collapseAll', {});
                        };

                        /**
                        * Attach an event handler to the tree view
                        * @param {string} name Name of the event to attach
                        * @param {function} callback The callback to execute on the event
                        * @param {object} scope The context to call the callback with
                        */
                        jetTreeView.prototype.on = function (name, callback, scope) {
                                if (events.indexOf(name) > -1) {
                                        if (!this.handlers[name]) {
                                                this.handlers[name] = [];
                                        }
                                        this.handlers[name].push({
                                                callback: callback,
                                                context: scope
                                        });
                                } else {
                                        throw new Error(name + ' is not supported by jetTreeView.');
                                }
                        };

                        /**
                        * Deattach an event handler from the tree view
                        * @param {string} name Name of the event to deattach
                        * @param {function} callback The function to deattach
                        */
                        jetTreeView.prototype.off = function (name, callback) {
                                var index, found = false;
                                if (this.handlers[name] instanceof Array) {
                                        this.handlers[name].forEach(function (handle, i) {
                                                index = i;
                                                if (handle.callback === callback && !found) {
                                                        found = true;
                                                }
                                        });
                                        if (found) {
                                                this.handlers[name].splice(index, 1);
                                        }
                                }
                        };

                        return jetTreeView;
                }());
        }));
}(window.define));
